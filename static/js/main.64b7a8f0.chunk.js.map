{"version":3,"sources":["components/Circle/Circle.tsx","functions/fetchCircles/fetchCircles.ts","functions/deleteCircle/deleteCircle.ts","functions/createCircle/createCircle.ts","components/CircleList/CircleList.tsx","components/AddCircleButton/AddCircleButton.tsx","functions/getRandomColor/getRandomColor.ts","components/DeleteCircleButton/DeleteCircleButton.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","circle","backgroundColor","props","color","height","width","margin","borderRadius","textAlign","lineHeight","Circle","text","classes","Box","className","fetchCircles","a","fetch","process","headers","Accept","response","json","deleteCircle","id","method","createCircle","position","body","JSON","stringify","buttonsWrapper","display","justifyContent","circlesWrapper","flexWrap","CircleList","useQuery","circles","data","isFetching","circlesList","useMemo","map","sx","size","length","lastCircleId","at","icon","AddCircleButton","queryClient","useQueryClient","addCircleMutation","useMutation","onSuccess","invalidateQueries","handleAddCircle","useCallback","mutate","Math","random","toString","slice","Button","onClick","DeleteCircleButton","deleteCircleMutation","handleRemoveCircle","QueryClient","App","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+KAQMA,EAAYC,YAAW,CACzBC,OAAQ,CACJC,gBAAiB,SAACC,GAAD,OAAoBA,EAAMC,OAC3CA,MAAO,OACPC,OAAQ,IACRC,MAAO,IACPC,OAAQ,GACRC,aAAc,MACdC,UAAW,SACXC,WAAY,WAaLC,EATA,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,KAAMR,EAA0C,EAA1CA,MACbS,EAAUd,EAAU,CAACK,UAC3B,OACI,cAACU,EAAA,EAAD,CAAKC,UAAWF,EAAQZ,OAAxB,SACKW,K,yBCzBAI,EAAY,uCAAG,4BAAAC,EAAA,sEACDC,MAAM,GAAD,OACrBC,4CADqB,YAExB,CACIC,QAAS,CACL,eAAgB,mBAChBC,OAAQ,sBANI,cAClBC,EADkB,gBAUXA,EAASC,OAVE,mFAAH,qDCAZC,EAAY,uCAAG,+BAAAP,EAAA,6DAASQ,EAAT,EAASA,GAAT,SACDP,MAAM,GAAD,OACrBC,4CADqB,mBACmBM,GAC3C,CACIC,OAAQ,SACRN,QAAS,CACL,eAAgB,sBANJ,cAClBE,EADkB,gBAUXA,EAASC,OAVE,mFAAH,sDCAZI,EAAY,uCAAG,mCAAAV,EAAA,6DACxBL,EADwB,EACxBA,KACAgB,EAFwB,EAExBA,SACAxB,EAHwB,EAGxBA,MAHwB,SASDc,MAAM,GAAD,OAAIC,4CAAJ,WAA4C,CACpEO,OAAQ,OACRG,KAAMC,KAAKC,UAAU,CACjBnB,OACAgB,WACAxB,UAEJgB,QAAS,CACL,eAAgB,sBAjBA,cASlBE,EATkB,gBAoBXA,EAASC,OApBE,mFAAH,sD,YCenBxB,EAAYC,YAAW,CACzBgC,eAAgB,CACZC,QAAS,OACTC,eAAgB,UAEpBC,eAAgB,CACZF,QAAS,OACTC,eAAgB,SAChBE,SAAU,UAwCHC,EApCI,WACf,IAAMxB,EAAUd,IAChB,EAAsCuC,mBAClC,CAAC,YACD,kBAAMtB,OAFIuB,EAAd,EAAQC,KAAeC,EAAvB,EAAuBA,WAKjBC,EAAcC,mBAAQ,WACxB,GAAIJ,EAAS,OAAOA,EAAQK,KAAI,SAAC3C,GAAD,OAC5B,cAAC,EAAD,CAAwBG,MAAOH,EAAOG,MAAOQ,KAAMX,EAAOW,MAA7CX,EAAOwB,SAE1B,CAACc,IAEH,OAAGE,EACC,cAAC3B,EAAA,EAAD,CAAK+B,GAAI,CAACZ,QAAS,OAAQC,eAAgB,UAA3C,SACI,cAAC,aAAD,CAAYY,KAAM,QAGvBP,EAAQQ,QAAU,EACjB,cAACjC,EAAA,EAAD,CAAKC,UAAWF,EAAQsB,eAAxB,SACI,cAAC,EAAD,MAIJ,gCACI,eAACrB,EAAA,EAAD,CAAKC,UAAWF,EAAQsB,eAAxB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAoBa,aAAcT,EAAQU,IAAI,GAAGxB,QAErD,cAACX,EAAA,EAAD,CAAKC,UAAWF,EAAQsB,eAAxB,SACKO,Q,0BC5CX3C,EAAYC,YAAW,CACzBkD,KAAM,CACF9C,MAAO,QACPE,MAAO,GACPD,OAAQ,MAwBD8C,EApBS,WACpB,IAAMtC,EAAUd,IACVqD,EAAcC,2BACdC,EAAoBC,uBAAY,gBAAEnD,EAAF,EAAEA,MAAOQ,EAAT,EAASA,KAAMgB,EAAf,EAAeA,SAAf,OAA4CD,EAAa,CAAEvB,QAAOQ,OAAMgB,eAAa,CACvH4B,UAAW,WACPJ,EAAYK,kBAAkB,cAIhCC,EAAkBC,uBAAY,WAChCL,EAAkBM,OAAO,CAACxD,MC9BvB,KAAO,SAASyD,KAAKC,UAAU,GAAG,IAAI,GAAGC,SAAS,KAAKC,OAAO,GD8BdpD,KAAM,cAAegB,SAAU,MACpF,CAAC0B,IAEH,OACI,cAACW,EAAA,EAAD,CAASC,QAASR,EAAlB,SACI,cAAC,IAAD,CAAe3C,UAAWF,EAAQqC,U,iBE7BxCnD,EAAYC,YAAW,CACzBkD,KAAM,CACF9C,MAAO,MACPE,MAAO,GACPD,OAAQ,MAwBD8D,EApBY,SAAC,GAA2C,IAA1CnB,EAAyC,EAAzCA,aACnBnC,EAAUd,IACVqD,EAAcC,2BACde,EAAuBb,uBAAY,SAAC9B,GAAD,OAAgBD,EAAa,CAACC,SAAM,CACzE+B,UAAW,WACPJ,EAAYK,kBAAkB,cAIhCY,EAAqBV,uBAAY,SAAClC,GACpC2C,EAAqBR,OAAOnC,KAC9B,CAAC2C,IAEH,OACI,cAACH,EAAA,EAAD,CAAQC,QAAS,kBAAMG,EAAmBrB,IAA1C,SACI,cAAC,IAAD,CAAkBjC,UAAWF,EAAQqC,UC1B3CE,EAAc,IAAIkB,cAUTC,MARf,WACE,OACI,cAAC,sBAAD,CAAqBC,OAAQpB,EAA7B,SACI,cAAC,EAAD,OCKKqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.64b7a8f0.chunk.js","sourcesContent":["import React from 'react';\r\nimport {makeStyles} from \"@mui/styles\";\r\nimport {Box} from \"@mui/material\";\r\n\r\ninterface muiProps{\r\n    color: string\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    circle: {\r\n        backgroundColor: (props:muiProps) => props.color,\r\n        color: \"#fff\",\r\n        height: 100,\r\n        width: 100,\r\n        margin: 10,\r\n        borderRadius: '50%',\r\n        textAlign: \"center\",\r\n        lineHeight: '100px',\r\n    },\r\n});\r\n\r\nconst Circle = ({text, color}: {text: string, color: string}) => {\r\n    const classes = useStyles({color});\r\n    return (\r\n        <Box className={classes.circle}>\r\n            {text}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Circle;\r\n","export const fetchCircles = async () => {\r\n    const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/circle/`,\r\n        {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Accept: 'application/json',\r\n            },\r\n        }\r\n    )\r\n    return await response.json()\r\n}","export const deleteCircle = async ({ id }: { id: string }) => {\r\n    const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/circle/${id}`,\r\n        {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n        }\r\n    )\r\n    return await response.json()\r\n}","export const createCircle = async ({\r\n    text,\r\n    position,\r\n    color\r\n    }: {\r\n    text: string,\r\n    position: number,\r\n    color: string\r\n}) => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/circle`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            text,\r\n            position,\r\n            color\r\n        }),\r\n        headers: {\r\n            'Content-type': 'application/json',\r\n        },\r\n    })\r\n    return await response.json()\r\n}","import React, {useMemo} from 'react';\r\nimport {useQuery} from \"react-query\";\r\nimport {fetchCircles} from \"../../functions\";\r\nimport {AddCircleButton, Circle, DeleteCircleButton} from \"components\";\r\nimport {Box} from \"@mui/material\";\r\nimport {ClipLoader} from \"react-spinners\";\r\nimport {makeStyles} from \"@mui/styles\";\r\n\r\ninterface ICircle{\r\n    id: string,\r\n    color: string,\r\n    text: string,\r\n    position: number,\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    buttonsWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    circlesWrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap'\r\n    },\r\n});\r\n\r\nconst CircleList = () => {\r\n    const classes = useStyles();\r\n    const { data: circles, isFetching } = useQuery(\r\n        ['circles'],\r\n        () => fetchCircles()\r\n    )\r\n\r\n    const circlesList = useMemo(() => {\r\n        if( circles) return circles.map((circle: ICircle) => (\r\n            <Circle key={circle.id} color={circle.color} text={circle.text}/>\r\n        ))\r\n    },[circles]);\r\n\r\n    if(isFetching) return (\r\n        <Box sx={{display: 'flex', justifyContent: 'center'}}>\r\n            <ClipLoader size={150} />\r\n        </Box>\r\n    )\r\n    if(circles.length <= 0) return (\r\n        <Box className={classes.circlesWrapper}>\r\n            <AddCircleButton/>\r\n        </Box>\r\n    )\r\n    return (\r\n        <div>\r\n            <Box className={classes.circlesWrapper}>\r\n                <AddCircleButton/>\r\n                <DeleteCircleButton lastCircleId={circles.at(-1).id}/>\r\n            </Box>\r\n            <Box className={classes.circlesWrapper}>\r\n                {circlesList}\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CircleList;\r\n","import React, {useCallback} from 'react';\r\nimport {makeStyles} from \"@mui/styles\";\r\nimport {Button} from \"@mui/material\";\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport {useMutation, useQueryClient} from \"react-query\";\r\nimport {createCircle, getRandomColor} from \"functions\";\r\n\r\ninterface ICreatedCircle{\r\n    color: string,\r\n    text: string,\r\n    position: number,\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    icon: {\r\n        color: 'green',\r\n        width: 50,\r\n        height: 50\r\n    },\r\n});\r\n\r\nconst AddCircleButton = () => {\r\n    const classes = useStyles();\r\n    const queryClient = useQueryClient();\r\n    const addCircleMutation = useMutation(({color, text, position}:ICreatedCircle) => createCircle({ color, text, position }), {\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries('circles')\r\n        },\r\n    });\r\n\r\n    const handleAddCircle = useCallback(() => {\r\n        addCircleMutation.mutate({color: getRandomColor(), text: 'lorem ipsum', position: 3})\r\n    },[addCircleMutation])\r\n\r\n    return (\r\n        <Button  onClick={handleAddCircle}>\r\n            <AddCircleIcon className={classes.icon}/>\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default AddCircleButton;\r\n","export function getRandomColor(){\r\n    return \"#\" + ('00000'+(Math.random()*(1<<24)|0).toString(16)).slice(-6)\r\n}","import React, {useCallback} from 'react';\r\nimport {makeStyles} from \"@mui/styles\";\r\nimport {Button} from \"@mui/material\";\r\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\r\nimport {useMutation, useQueryClient} from \"react-query\";\r\nimport {deleteCircle} from \"functions\";\r\n\r\nconst useStyles = makeStyles({\r\n    icon: {\r\n        color: 'red',\r\n        width: 50,\r\n        height: 50\r\n    },\r\n});\r\n\r\nconst DeleteCircleButton = ({lastCircleId}:{lastCircleId: string}) => {\r\n    const classes = useStyles();\r\n    const queryClient = useQueryClient();\r\n    const deleteCircleMutation = useMutation((id: string) => deleteCircle({id}), {\r\n        onSuccess: () => {\r\n            queryClient.invalidateQueries('circles')\r\n        },\r\n    });\r\n\r\n    const handleRemoveCircle = useCallback((id) => {\r\n        deleteCircleMutation.mutate(id);\r\n    },[deleteCircleMutation])\r\n\r\n    return (\r\n        <Button onClick={() => handleRemoveCircle(lastCircleId)}>\r\n            <RemoveCircleIcon className={classes.icon} />\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default DeleteCircleButton;\r\n","import React from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport {CircleList} from \"./components\";\n\nconst queryClient = new QueryClient()\n\nfunction App() {\n  return (\n      <QueryClientProvider client={queryClient}>\n          <CircleList/>\n      </QueryClientProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}